# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: appkube-ecommerce-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  stage: dev
  region: us-east-1
  runtime: nodejs18.x
  role: arn:aws:iam::657907747545:role/appkube-ecommerce-api-service-role
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type

# you can overwrite defaults here

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  # createProduct:
  #   handler: products/createProduct.handler
  #   events:
  #     - httpApi:
  #         path: /product
  #         method: post

  # updateProduct:
  #   handler: products/updateProduct.handler
  #   events:
  #     - httpApi:
  #         path: /product
  #         method: put

  # getAllProducts:
  #   handler: products/getAllProducts.handler
  #   events:
  #     - httpApi:
  #         path: /product  # Corrected path to differentiate from other endpoints
  #         method: get      # Corrected method to match the intended action

  - ${file(order/function.yml)}
  - ${file(AppSyncFunctions/function.yaml)}
  - ${file(inventory/function.yml)}
  - ${file(Products/function.yml)}
  # #    The following are a few example events you can configure

  - ${file(OrderBills/function.yml)}
  - ${file(Users/function.yml)}
  - ${file(Login/function.yml)}
<<<<<<< HEAD

#   - ${file(catalog/function.yml)}
=======
  - ${file(Customer/function.yml)}
  - ${file(webhooks/function.yml)}



>>>>>>> main


  
  

plugins:
  - serverless-offline
